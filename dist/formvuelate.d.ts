// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../vue

declare module 'formvuelate' {
    import { DefineComponent } from "vue";
    import { PluginFunction } from "formvuelate/types/plugins";
    
    export function useSchemaForm<
        TValues extends Record<string, any> = Record<string, any>
    >(initialFormValues?: TValues): { formModel: TValues };
    
    export function SchemaFormFactory(
        plugins?: PluginFunction[],
        components?: Record<string, DefineComponent>
    ): DefineComponent;
    
    export * from "formvuelate/types/plugins";
    export * from "formvuelate/types/schema";
    export * from "formvuelate/types/components";
}

declare module 'formvuelate/types/plugins' {
    import { BaseSchemaReturns } from "formvuelate/types/schema";
    
    export type PluginFunction = (
        baseReturns: BaseSchemaReturns
    ) => BaseSchemaReturns;
}

declare module 'formvuelate/types/schema' {
    import { ComputedRef, DefineComponent } from "vue";
    
    export interface FieldSchema extends Record<string, any> {
        component: DefineComponent;
    }
    
    export interface FieldSchemaWithModel extends FieldSchema {
        model: any;
    }
    
    export type FormArraySchema = FieldSchemaWithModel[];
    
    export type FormObjectSchema = Record<string, FieldSchema>;
    
    export interface BaseSchemaReturns {
        behaveLikeParentSchema: ComputedRef<boolean>;
        parsedSchema: ComputedRef<FormArraySchema[]>;
        hasParentSchema: boolean;
        formBinds: ComputedRef<Record<string, any>>;
        slotBinds: ComputedRef<Record<string, any>>;
    }
}

declare module 'formvuelate/types/components' {
    import { DefineComponent, PropType } from "vue";
    import { FormArraySchema, FormObjectSchema } from "formvuelate/types/schema";
    
    type ClassBindingValue = string | Record<string, boolean>;
    type ClassBindingExpression =
        | ClassBindingValue
        | (string | Record<string, boolean>)[];
    
    const SchemaForm: DefineComponent<{
        schema: {
            type: PropType<FormObjectSchema | FormArraySchema>;
            default: any;
        };
        sharedConfig: {
            type: ObjectConstructor;
            default: any;
        };
        preventModelCleanupOnSchemaChange: {
            type: PropType<boolean>;
            default: boolean;
        };
        nestedSchemaModel: {
            type: PropType<string>;
            default: string;
        };
        schemaRowClasses: {
            type: PropType<ClassBindingExpression>;
            default: any;
        };
    }>;
    
    const SchemaWizard: DefineComponent<{
        schema: {
            type: PropType<(FormObjectSchema | FormArraySchema)[]>;
            required: true;
        };
        step: {
            type: PropType<number>;
            required: true;
        };
    }>;
}

